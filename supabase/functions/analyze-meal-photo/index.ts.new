import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.38.4";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL') ?? '';
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Verificar que a chave API da OpenAI está configurada
    if (!openAIApiKey) {
      throw new Error("OpenAI API key não configurada");
    }

    let dataUri;
    let userId = 'anonymous';
    
    // Verificar o tipo de conteúdo para determinar o processamento adequado
    const contentType = req.headers.get('content-type') || '';
    console.log('Content-Type detectado:', contentType);
    
    try {
      // Tentar processar como JSON primeiro (formato mais comum em chamadas de API modernas)
      if (contentType.includes('application/json') || contentType === '' || contentType.includes('text/plain')) {
        try {
          console.log('Tentando processar como JSON...');
          const jsonData = await req.json();
          
          if (jsonData && jsonData.image) {
            console.log('JSON válido detectado com campo image');
            dataUri = jsonData.image;
            
            // Extrair userId se presente
            if (jsonData.userId) {
              userId = jsonData.userId;
            }
            
            console.log(`Analisando imagem em formato JSON para o usuário ${userId}`);
          } else {
            console.log('JSON inválido ou sem campo image. Dados recebidos:', JSON.stringify(jsonData));
            throw new Error("Imagem não fornecida no JSON ou formato inválido");
          }
        } catch (jsonError) {
          console.error('Erro ao processar JSON:', jsonError);
          
          // Se falhar como JSON, tentar como FormData
          if (contentType.includes('multipart/form-data') || contentType.includes('form-data') || contentType === '') {
            console.log('Tentando processar como FormData após falha de JSON...');
            try {
              const formData = await req.formData();
              const imageFile = formData.get('image');
              
              if (!imageFile) {
                throw new Error("Imagem não fornecida no FormData");
              }
              
              // Extrair userId se presente
              const formUserId = formData.get('userId') as string;
              if (formUserId) {
                userId = formUserId;
              }
              
              // Converter a imagem para base64
              if (imageFile instanceof File) {
                const arrayBuffer = await imageFile.arrayBuffer();
                const uint8Array = new Uint8Array(arrayBuffer);
                const base64Image = btoa(String.fromCharCode.apply(null, Array.from(uint8Array)));
                const mimeType = imageFile.type || 'image/jpeg';
                dataUri = `data:${mimeType};base64,${base64Image}`;
                
                console.log(`Analisando imagem em formato FormData para o usuário ${userId}`);
              } else if (typeof imageFile === 'string') {
                // Já é uma string, verificar se é base64 ou URL
                if (imageFile.startsWith('data:')) {
                  dataUri = imageFile;
                } else {
                  // Assumir que é uma URL ou texto sem o prefixo data:
                  dataUri = `data:image/jpeg;base64,${imageFile}`;
                }
              } else {
                throw new Error("Formato de imagem não suportado no FormData");
              }
            } catch (formError) {
              console.error('Erro ao processar FormData:', formError);
              throw new Error(`Não foi possível processar os dados como JSON nem como FormData: ${formError.message}`);
            }
          } else {
            // Se não for multipart/form-data, propagar o erro original de JSON
            throw jsonError;
          }
        }
      } 
      // Tentar explicitamente como FormData se o Content-Type indicar
      else if (contentType.includes('multipart/form-data') || contentType.includes('form-data')) {
        console.log('Processando requisicão no formato FormData baseado no Content-Type...');
        try {
          const formData = await req.formData();
          const imageFile = formData.get('image');
          
          if (!imageFile) {
            throw new Error("Imagem não fornecida no FormData");
          }
          
          // Extrair userId se presente
          const formUserId = formData.get('userId') as string;
          if (formUserId) {
            userId = formUserId;
          }
          
          // Converter a imagem para base64
          if (imageFile instanceof File) {
            const arrayBuffer = await imageFile.arrayBuffer();
            const uint8Array = new Uint8Array(arrayBuffer);
            const base64Image = btoa(String.fromCharCode.apply(null, Array.from(uint8Array)));
            const mimeType = imageFile.type || 'image/jpeg';
            dataUri = `data:${mimeType};base64,${base64Image}`;
          } else if (typeof imageFile === 'string') {
            // Já é uma string, verificar se é base64 ou URL
            if (imageFile.startsWith('data:')) {
              dataUri = imageFile;
            } else {
              // Assumir que é uma URL ou texto sem o prefixo data:
              dataUri = `data:image/jpeg;base64,${imageFile}`;
            }
          } else {
            throw new Error("Formato de imagem não suportado no FormData");
          }
          
          console.log(`Analisando imagem em formato FormData para o usuário ${userId}`);
        } catch (formError) {
          console.error('Erro ao processar FormData:', formError);
          throw formError;
        }
      }
      else {
        // Content-Type não é nem JSON nem FormData
        console.error(`Formato de conteúdo não suportado: ${contentType}`);
        throw new Error(`Formato de conteúdo não suportado: ${contentType}`);
      }
    } catch (processingError) {
      console.error('Erro durante processamento da requisição:', processingError);
      throw processingError;
    }
    
    if (!dataUri) {
      throw new Error("Falha ao processar a imagem");
    }

    // Define the system prompt
    const systemPrompt = `
      Você é um assistente especializado em nutrição que analisa imagens de refeições.
      Forneça uma análise detalhada da imagem da refeição, incluindo:
      
      1. Identificação de todos os alimentos visíveis
      2. Estimativa das calorias totais
      3. Macronutrientes aproximados (proteínas, carboidratos, gorduras)
      4. Quantidade estimada de fibras
      
      Formate sua resposta como um objeto JSON com os seguintes campos:
      {
        "calories": número,
        "protein": número,
        "carbs": número,
        "fat": número,
        "fiber": número,
        "foodItems": [
          {
            "name": "nome do alimento em português",
            "calories": número,
            "portion": "porção estimada"
          }
        ]
      }
      
      Responda APENAS com o JSON, sem texto adicional.
    `;

    // Call OpenAI API with the image
    console.log('Enviando requisição para OpenAI...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { 
            role: 'system', 
            content: systemPrompt 
          },
          {
            role: 'user',
            content: [
              { type: 'text', text: 'Analise esta imagem de refeição e forneça informações nutricionais detalhadas.' },
              { 
                type: 'image_url', 
                image_url: { 
                  url: dataUri 
                } 
              }
            ]
          }
        ],
        temperature: 0.3,
        max_tokens: 1000,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('OpenAI API error:', errorData);
      throw new Error(`OpenAI API error: ${errorData.error?.message || 'Erro desconhecido'}`);
    }

    const completion = await response.json();
    const nutritionDataText = completion.choices[0].message.content;
    console.log('Resposta bruta da OpenAI:', nutritionDataText);

    try {
      // Parse the JSON response
      const nutritionData = JSON.parse(nutritionDataText);
      
      console.log('Análise concluída com sucesso');

      return new Response(
        JSON.stringify({ 
          success: true,
          data: nutritionData
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    } catch (error) {
      console.error('Erro ao processar resposta da OpenAI:', error, nutritionDataText);
      throw new Error(`Erro ao processar análise: ${error.message}`);
    }
  } catch (error) {
    console.error('Erro na função analyze-meal-photo:', error);
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message 
      }),
      { 
        status: 400, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
