import React, { useState, useEffect } from 'react';
import * as Dialog from '@radix-ui/react-dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Clock, Check, X } from 'lucide-react';
import { cn } from '@/lib/utils';

// Tipo para detalhes da refeição
interface MealDetailsType {
  id: number;
  name: string;
  time: string;
  alternativeText?: string;
  completed?: boolean;
}

interface MealDetailsModalProps {
  meal: MealDetailsType;
  onMealCompleted: (mealId: number) => void;
  onUndoMealCompleted?: (mealId: number) => void;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  className?: string;
}

const MealDetailsModal = ({
  meal,
  onMealCompleted,
  onUndoMealCompleted,
  open,
  onOpenChange,
  className = ""
}: MealDetailsModalProps) => {
  const [alternativeDescription, setAlternativeDescription] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Função para completar a refeição
  const handleCompleteMeal = () => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    
    // Se tiver descrição alternativa, salvar
    if (alternativeDescription.trim()) {
      const savedMeals = localStorage.getItem('nutri-mindflow-meals');
      if (savedMeals) {
        const meals = JSON.parse(savedMeals);
        const updatedMeals = meals.map((m: MealDetailsType) => {
          if (m.id === meal.id) {
            return {
              ...m,
              alternativeText: alternativeDescription.trim(),
              completed: true
            };
          }
          return m;
        });
        
        localStorage.setItem('nutri-mindflow-meals', JSON.stringify(updatedMeals));
      }
    }
    
    // Chamar função de callback para completar a refeição
    onMealCompleted(meal.id);
    
    // Limpar estados
    setIsSubmitting(false);
    setAlternativeDescription('');
    
    // Fechar o modal
    onOpenChange(false);
  };
  
  // Função para desfazer a conclusão da refeição
  const handleUndoMealCompleted = () => {
    if (onUndoMealCompleted) {
      onUndoMealCompleted(meal.id);
      onOpenChange(false);
    }
  };
  
  // Carregar dados salvos quando o modal for aberto
  useEffect(() => {
    if (open) {
      // Verificar se existe uma descrição alternativa salva
      const savedMeals = localStorage.getItem('nutri-mindflow-meals');
      if (savedMeals) {
        const meals = JSON.parse(savedMeals);
        const currentMeal = meals.find((m: MealDetailsType) => m.id === meal.id);
        if (currentMeal && currentMeal.alternativeText) {
          setAlternativeDescription(currentMeal.alternativeText);
        }
      }
    }
  }, [open, meal.id]);
  
  return (
    <Dialog.Root open={open} onOpenChange={onOpenChange}>
      <Dialog.Portal>
        <Dialog.Overlay className="fixed inset-0 bg-black/50 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0" />
        <Dialog.Content className={cn(
          "fixed left-[50%] top-[50%] z-50 w-full max-w-md translate-x-[-50%] translate-y-[-50%] rounded-lg border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]",
          className
        )}>
          <Dialog.Title className="flex items-center text-lg font-semibold">
            <div className="flex-1">{meal.name}</div>
            <Badge className="ml-2 bg-blue-100 text-blue-800 hover:bg-blue-200">
              <Clock className="h-3 w-3 mr-1" /> {meal.time}
            </Badge>
          </Dialog.Title>
          <Dialog.Description className="text-sm text-gray-500 mt-1 mb-4">
            Registre detalhes sobre esta refeição
          </Dialog.Description>
          
          <div className="py-4">
            <div className="mb-2 text-sm font-medium">O que você comeu?</div>
            <Textarea
              placeholder="Descreva o que você comeu nesta refeição..."
              className="resize-none h-24"
              value={alternativeDescription}
              onChange={(e) => setAlternativeDescription(e.target.value)}
            />
          </div>
          
          <div className="flex justify-end gap-2 mt-4">
            {meal.completed && onUndoMealCompleted && (
              <Button
                type="button"
                variant="outline"
                onClick={handleUndoMealCompleted}
                className="w-full sm:w-auto"
              >
                <X className="h-4 w-4 mr-2" />
                Desfazer Conclusão
              </Button>
            )}
            
            {!meal.completed && (
              <Button
                type="button"
                onClick={handleCompleteMeal}
                className="w-full sm:w-auto"
              >
                <Check className="h-4 w-4 mr-2" />
                Confirmar Refeição
              </Button>
            )}
          </div>
          
          <Dialog.Close asChild>
            <button 
              className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none"
              aria-label="Close"
            >
              <X className="h-4 w-4" />
            </button>
          </Dialog.Close>
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  );
};

export default MealDetailsModal;
