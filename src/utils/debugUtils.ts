/**
 * Utilit√°rios de depura√ß√£o para auxiliar no rastreamento de problemas
 */

// Habilitamos o modo de depura√ß√£o para desenvolvimento
const DEBUG_MODE = true;

/**
 * Fun√ß√£o para logar informa√ß√µes de depura√ß√£o com formata√ß√£o melhorada
 */
export const debugLog = (title: string, data: any, showInProduction = false) => {
  if (DEBUG_MODE || showInProduction) {
    console.log(
      `%cüîç DEBUG: ${title}`, 
      'background: #333; color: #bada55; padding: 2px 6px; border-radius: 2px; font-weight: bold;',
      data
    );
  }
};

/**
 * Fun√ß√£o para salvar dados de depura√ß√£o no localStorage
 */
export const saveDebugData = (key: string, data: any) => {
  if (DEBUG_MODE) {
    try {
      localStorage.setItem(`debug_${key}`, JSON.stringify({
        data,
        timestamp: new Date().toISOString(),
      }));
    } catch (error) {
      console.error('Erro ao salvar dados de depura√ß√£o:', error);
    }
  }
};

/**
 * Fun√ß√£o para obter dados de depura√ß√£o do localStorage
 */
export const getDebugData = (key: string) => {
  if (DEBUG_MODE) {
    try {
      const data = localStorage.getItem(`debug_${key}`);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.error('Erro ao obter dados de depura√ß√£o:', error);
      return null;
    }
  }
  return null;
};

/**
 * Fun√ß√£o para registrar uma s√©rie de eventos para rastreamento
 */
export const trackDebugEvent = (category: string, event: string, data: any = {}) => {
  if (DEBUG_MODE) {
    try {
      // Obter eventos existentes ou iniciar nova matriz
      const existingEvents = JSON.parse(localStorage.getItem(`debug_events_${category}`) || '[]');
      
      // Adicionar novo evento com timestamp
      existingEvents.push({
        event,
        data,
        timestamp: new Date().toISOString()
      });
      
      // Manter apenas os √∫ltimos 100 eventos para n√£o sobrecarregar o localStorage
      const trimmedEvents = existingEvents.slice(-100);
      
      // Salvar eventos de volta no localStorage
      localStorage.setItem(`debug_events_${category}`, JSON.stringify(trimmedEvents));
      
      // Log no console para facilitar
      debugLog(`Evento [${category}]: ${event}`, data);
    } catch (error) {
      console.error('Erro ao registrar evento de depura√ß√£o:', error);
    }
  }
};

/**
 * Fun√ß√£o para limpar todos os dados de depura√ß√£o
 */
export const clearAllDebugData = () => {
  if (DEBUG_MODE) {
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('debug_')) {
        localStorage.removeItem(key);
      }
    });
    console.log('%cüßπ Dados de depura√ß√£o limpos!', 'background: #333; color: #ff9966; padding: 2px 6px; border-radius: 2px; font-weight: bold;');
  }
};

// Componente de depura√ß√£o visual que pode ser injetado em qualquer lugar da aplica√ß√£o
export const createDebugButton = () => {
  if (DEBUG_MODE) {
    // Verificar se o bot√£o j√° existe
    if (document.getElementById('debug-button')) return;
    
    // Criar bot√£o de depura√ß√£o flutuante
    const button = document.createElement('button');
    button.id = 'debug-button';
    button.innerText = 'üîç Debug';
    button.style.position = 'fixed';
    button.style.bottom = '20px';
    button.style.right = '20px';
    button.style.zIndex = '9999';
    button.style.padding = '8px 12px';
    button.style.background = '#333';
    button.style.color = '#bada55';
    button.style.border = 'none';
    button.style.borderRadius = '4px';
    button.style.cursor = 'pointer';
    
    // Ao clicar, mostra todos os dados de depura√ß√£o no console
    button.addEventListener('click', () => {
      console.log('%cüìä DADOS DE DEPURA√á√ÉO:', 'background: #333; color: #bada55; font-size: 16px; padding: 4px 8px; border-radius: 2px;');
      
      // Filtrar as chaves do localStorage para obter apenas as de depura√ß√£o
      const debugKeys = Object.keys(localStorage).filter(key => key.startsWith('debug_'));
      
      // Mostrar cada categoria de dados
      debugKeys.forEach(key => {
        try {
          const value = JSON.parse(localStorage.getItem(key) || '{}');
          console.log(`%c${key.replace('debug_', '')}:`, 'color: #ff9966; font-weight: bold;', value);
        } catch (e) {
          console.log(`%c${key.replace('debug_', '')}:`, 'color: #ff9966; font-weight: bold;', localStorage.getItem(key));
        }
      });
      
      if (debugKeys.length === 0) {
        console.log('%cNenhum dado de depura√ß√£o encontrado', 'color: #999;');
      }
      
      // Adicionar op√ß√£o de limpar dados
      console.log('%cPara limpar todos os dados de depura√ß√£o, execute: clearAllDebugData()', 'color: #999;');
    });
    
    // Adicionar o bot√£o ao documento
    document.body.appendChild(button);
  }
};
