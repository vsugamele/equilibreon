import { supabase } from '@/integrations/supabase/client';

export interface FoodAnalysisResult {
  foodName: string;
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
  fiber: number;
  sugar?: number;
  sodium?: number;
  confidence: number;
  servingSize: string;
  analysisSummary?: string;
  recommendations?: string;
  foodItemsDetected?: string[];
  analyzedAt: Date;
  foodItems: Array<{
    name: string;
    calories: number;
    portion: string;
    macroDetails?: {
      protein?: number;
      carbs?: number;
      fat?: number;
      fiber?: number;
    };
  }>;
}

export const foodAnalysisService = {
  /**
   * Analisa uma imagem de alimento usando OpenAI através da Edge Function do Supabase
   * Com fallback para análise local em caso de falha
   */
  async analyzeImage(file: File): Promise<FoodAnalysisResult> {
    try {
      console.log('Iniciando análise de imagem de alimento...');
      
      // Criar FormData para envio da imagem
      const formData = new FormData();
      
      // Adicionar o ID do usuário logado (se disponível)
      const { data: { user } } = await supabase.auth.getUser();
      if (user?.id) {
        formData.append('userId', user.id);
      }
      
      // Adicionar a imagem
      formData.append('image', file);
      
      console.log('Enviando imagem para análise com Edge Function...');
      
      // Chamar a Edge Function para análise com OpenAI
      const { data, error } = await supabase.functions.invoke('analyze-meal-photo', {
        body: formData
      });
      
      // Se houver erro, mostrar detalhes e lançar exceção
      if (error) {
        console.error('Erro detalhado na Edge Function:', error);
        console.error('Tipo de erro:', error.name);
        console.error('Mensagem:', error.message);
        console.error('Contexto:', error.context);
        throw new Error(`Erro na Edge Function: ${error.message || JSON.stringify(error)}`);
      }
      
      // Verificar se a resposta contém os dados esperados
      if (!data || !data.success || !data.data) {
        console.error('Resposta inválida da Edge Function:', data);
        throw new Error('Formato de resposta inválido da análise com IA');
      }
      
      console.log('Análise com IA concluída com sucesso:', data);
      
      // Mapear os dados retornados para a interface FoodAnalysisResult
      return {
        foodName: data.data.foodItems?.length > 0 ? data.data.foodItems[0].name : 'Alimento',
        calories: data.data.calories || 0,
        protein: data.data.protein || 0,
        carbs: data.data.carbs || 0,
        fat: data.data.fat || 0,
        fiber: data.data.fiber || 0,
        sugar: data.data.sugar || 0,
        sodium: data.data.sodium || 0,
        confidence: 0.95,  // IA tem alta confiabilidade
        servingSize: '100g',
        // Criar um resumo da análise
        analysisSummary: `Identificamos uma refeição com aproximadamente ${data.data.calories} calorias. ${data.data.foodItems?.map(item => item.name).join(', ') || 'Vários alimentos'} detectados na imagem.`,
        // Recomendações baseadas nos valores nutricionais
        recommendations: this.generateRecommendationFromNutrients(data.data),
        // Lista de alimentos detectados
        foodItemsDetected: data.data.foodItems?.map(item => item.name) || [],
        // Timestamp atual
        analyzedAt: new Date(),
        // Detalhar os itens alimentares
        foodItems: data.data.foodItems || []
      };
      
    } catch (error) {
      console.error('Erro na análise de imagem:', error);
      
      // Em caso de erro, usar a análise local como fallback
      return this.getMockFoodAnalysis(file.name);
    }
  },
  
  /**
   * Gera recomendações baseadas nos valores nutricionais
   */
  generateRecommendationFromNutrients(nutrientData: any): string {
    // Calcular percentuais de macronutrientes
    const totalCalorias = nutrientData.calories || 0;
    if (!totalCalorias) return 'Não foi possível gerar recomendações nutricionais.';
    
    const proteinPercent = ((nutrientData.protein || 0) * 4 / totalCalorias) * 100;
    const carbsPercent = ((nutrientData.carbs || 0) * 4 / totalCalorias) * 100;
    const fatPercent = ((nutrientData.fat || 0) * 9 / totalCalorias) * 100;
    
    let recommendation = '';
    
    // Verificar equilíbrio de macronutrientes
    if (proteinPercent < 10) {
      recommendation += 'Esta refeição tem baixo teor de proteínas. Considere adicionar fontes proteicas como carnes magras, ovos, leguminosas ou laticínios. ';
    } else if (proteinPercent > 35) {
      recommendation += 'Esta refeição tem alto teor de proteínas. Equilibre com carboidratos complexos e gorduras saudáveis nas próximas refeições. ';
    }
    
    if (carbsPercent < 25) {
      recommendation += 'Esta refeição tem baixo teor de carboidratos. Considere adicionar grãos integrais, frutas ou vegetais ricos em amido. ';
    } else if (carbsPercent > 65) {
      recommendation += 'Esta refeição tem alto teor de carboidratos. Nas próximas refeições, priorize proteínas e vegetais para equilibrar. ';
    }
    
    if (fatPercent < 15) {
      recommendation += 'Esta refeição tem baixo teor de gorduras. Considere adicionar fontes saudáveis como abacate, azeite ou oleaginosas. ';
    } else if (fatPercent > 40) {
      recommendation += 'Esta refeição tem alto teor de gorduras. Equilibre com proteínas magras e carboidratos complexos nas próximas refeições. ';
    }
    
    // Verificar fibras
    if ((nutrientData.fiber || 0) < 3 && totalCalorias > 300) {
      recommendation += 'Esta refeição tem baixo teor de fibras. Adicione mais vegetais, frutas e grãos integrais para melhorar a saúde digestiva. ';
    }
    
    // Se não houver recomendações específicas
    if (!recommendation) {
      recommendation = 'Esta refeição parece bem equilibrada em macronutrientes. Continue mantendo a variedade de alimentos para obter todos os micronutrientes necessários.';
    }
    
    return recommendation;
  },
  
  /**
   * Análise simulada baseada no nome do arquivo (fallback)
   */
  getMockFoodAnalysis(fileName: string): FoodAnalysisResult {
    console.log('Usando análise local simulada baseada no nome do arquivo:', fileName);
    const fileNameLower = fileName.toLowerCase();
    
    // Configurações para diferentes tipos de alimentos
    let name = 'Refeição Padrão';
    let calories = 350;
    let protein = 15;
    let carbs = 40;
    let fat = 12;
    let fiber = 3;
    let sugar = 5;
    let sodium = 150;
    let confidence = 0.65;
    
    // Detectar tipo de alimento pelo nome do arquivo
    if (fileNameLower.includes('salada') || fileNameLower.includes('salad')) {
      name = 'Salada Mista';
      calories = 120;
      protein = 3.5;
      carbs = 10;
      fat = 7;
      fiber = 5;
      sugar = 3;
      sodium = 45;
      confidence = 0.85;
    } else if (fileNameLower.includes('arroz') || fileNameLower.includes('rice')) {
      name = 'Arroz Branco';
      calories = 200;
      protein = 4;
      carbs = 45;
      fat = 0.5;
      fiber = 0.6;
      sugar = 0.1;
      sodium = 5;
      confidence = 0.9;
    } else if (fileNameLower.includes('frango') || fileNameLower.includes('chicken')) {
      name = 'Peito de Frango Grelhado';
      calories = 165;
      protein = 31;
      carbs = 0;
      fat = 3.6;
      fiber = 0;
      sugar = 0;
      sodium = 75;
      confidence = 0.88;
    } else if (fileNameLower.includes('pizza')) {
      name = 'Pizza de Queijo';
      calories = 285;
      protein = 12;
      carbs = 36;
      fat = 10;
      fiber = 2.5;
      sugar = 4;
      sodium = 590;
      confidence = 0.82;
    } else if (fileNameLower.includes('peixe') || fileNameLower.includes('fish')) {
      name = 'Filé de Peixe';
      calories = 140;
      protein = 22;
      carbs = 0;
      fat = 5;
      fiber = 0;
      sugar = 0;
      sodium = 60;
      confidence = 0.87;
    }
    
    // Criar item de comida principal
    const foodItem = {
      name,
      calories,
      portion: '100g',
      macroDetails: {
        protein,
        carbs,
        fat,
        fiber
      }
    };
    
    // Gerar resumo da análise
    const analysisSummary = `Identificamos ${name} contendo aproximadamente ${calories} calorias. ` +
      `Esta refeição contém ${protein}g de proteínas, ${carbs}g de carboidratos, ${fat}g de gorduras e ${fiber}g de fibras. ` +
      `Sua composição nutricional é ${Math.round((protein * 4 / calories) * 100)}% proteínas, ` +
      `${Math.round((carbs * 4 / calories) * 100)}% carboidratos e ${Math.round((fat * 9 / calories) * 100)}% gorduras.`;
    
    // Gerar recomendações simuladas
    const recommendations = this.generateRecommendationFromNutrients({
      calories,
      protein, 
      carbs,
      fat,
      fiber
    });
    
    return {
      foodName: name,
      calories,
      protein,
      carbs,
      fat,
      fiber,
      sugar,
      sodium,
      confidence,
      servingSize: '100g',
      analysisSummary,
      recommendations,
      foodItemsDetected: [name],
      analyzedAt: new Date(),
      foodItems: [foodItem]
    };
  }
};

export default foodAnalysisService;
